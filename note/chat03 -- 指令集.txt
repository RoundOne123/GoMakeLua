【基于栈和基于寄存器的虚拟机：】
	基于栈：Java、.Net CLR、Python虚拟机
		需要使用PUSH类指令往栈顶推入值，使用POP类指令从栈顶弹出值，其他指令是对栈顶值进行操作
		指令集相对比较大，平均指令长度比较短
	
	
	基于寄存器：Lua虚拟机（5.0之前基于栈，5.0开始基于寄存器）
		直接对寄存器进行寻址，不需要PUSH或者POP类指令，
		指令集相对较小，但需要把寄存器地址编码进指令里，所以指令的平均长度比较长
		
【定长指令集和变长指令集：】
	根据指令长度是否固定划分
	变长：Java虚拟机
	定长：Lua虚拟机，每条指令4字节（32bit），6bit操作码，26bit操作数
	
	Lua5.3 共定义了47条指令，大致可分为：
		常量加载指令、运行算符指令、循环和跳转指令、函数调用相关指令、表操作指令以及Upvalue操作指令6大类
		
【指令编码格式：】
	编码模式：
		按照高26bit的操作数的分配（以及解释）方式，分为四种编码模式
		iABC、iABx、iAsBx\iAx
		
	操作码：
		用于识别指令，Lua虚拟机指令使用6个比特表示操作码，所以最多只能有64条指令（lua5.3定义了0~46共47条指令）
		
	操作数：
		指令的参数，根据编码模式的不同，每条指令可携带1~3个操作数
		
		操作数A主要用来表示目标寄存器索引
		其他操作数表示的信息，粗略分为四种：
			OpArgN、OpArgU、OpArgR、OpArgK
		
【指令解码：】 luago F:\STUDY\$LUAGO\lua\ch02\luac.out
