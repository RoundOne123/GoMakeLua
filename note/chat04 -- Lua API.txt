【Lua API介绍】
强大、高效、轻量级的可嵌入脚本语言，可很方便的嵌入其他宿主环境。
Lua核心是以库的形式被实现的，其他应用程序只要链接Lua库就可以使用Lua提供的API轻松获得脚本执行能力。
发布版Lua种的，lua、luac两个命令行程序，就是两个特殊的宿主程序。

Clean C

Lua API -> 一系列以”lua_“开头的C语言函数（也可能是宏定义）
最开始Lua解释器的状态完全隐藏在API的后面，散落在各种全局变量里
Lua3.1 引入 lua_State 结构体 对解释器状态进行了封装 用户可以在多个解释器实例之间切换
Lua4.0 对API进行了重新设计，引入了虚拟栈的概念 并且让lua_State结构从幕后走到台前
用户使用lua_newstate()函数创建lua_State实例，其他函数用于操作lua_State实例

所以 解释器 是指？ 与 lua_State 是个什么样的关系？
	理解：解释下即拥有执行脚本能力的程序，嵌如Lua库即可。最早使用lua库时 比较麻烦，功能比较分散，
	后来讲这些功能抽象到 lua_State 中，这样就可以方便的通过 lua_State 的实例来执行脚本。
	具体继续学习去理解
	
lua_xxx ：基本函数
luaL_ ： 辅助函数，在基本函数之上实现的，为了提供一些便利的操作


【Lua栈】
全部的API函数都是围绕Lua State进行操作，而Lua State内部封装的最为基础的状态就是虚拟栈（Lua栈）

是宿主语言（官方Lua来说是C语言，本书来说是Go语言）和Lua语言进行沟通的桥梁
宿主语言指要与Lua交互的语言还是实现Lua虚拟机的语言？（如果C#与Lua交互 宿主语言 就是C# ？？还是实现虚拟机的语言？？） ***********有大疑问***********

Lua栈能够存放哪些值，如何按照索引来存取这些值？

【Lua数据类型和值】
动态类型语言，变量不携带类型信息，变量的值才携带类型信息

支持8种数据类型
lua5.3之前 数字类型只有浮点数一种，5.3开始 分为 浮点数和整数（优化而加入到Lua虚拟机层面的）

【栈索引】
Lua API 里面栈相关函数，除了一小部分执行推入和弹出操作外，其他大部分都涉及索引操作。

栈索引从 1 开始
索引可以是负数。正数索引叫做绝对索引从 1 （栈底）开始递增，
负数索引叫做相对索引，从 -1（栈顶）开始递减
Lua API 函数会在内部把相对索引转换为绝对索引

有效索引、可接受索引
写入值：必须提供有效索引
读取值：只要提供可接受索引

栈容量、栈顶索引、绝对索引、相对索引、有效索引、无效索引、可接受索引

【Lua State】
Lua State 封装了整个Lua 解释器状态 为了方便介绍 暂时先认为 Lua State 内部只有一个Lua栈

【定义LuaState接口】
C LUA API 体现为 函数（和宏定义）
GO语言 支持接口，使用接口

基础栈操作方法、栈访问方法、压栈方法

【定义LuaState结构体】


【基础栈操纵方法】

absIndex  理解 如何获取 绝对索引 的方法

【Push方法】


4.3.5 接着看